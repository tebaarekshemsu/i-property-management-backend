"""Add admin_id to Invitation table

Revision ID: 6ab63cc4100b
Revises: d765afba44f1
Create Date: 2025-04-23 14:51:58.210405

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '6ab63cc4100b'
down_revision: Union[str, None] = 'd765afba44f1'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('invitation')
    op.drop_table('vip_status')
    op.drop_table('success_report')
    op.drop_table('failure_report')
    op.drop_table('house')
    op.drop_table('area')
    op.drop_table('admin_location')
    op.drop_index('ix_user_phone_no', table_name='user')
    op.drop_index('ix_user_user_id', table_name='user')
    op.drop_table('user')
    op.drop_table('broker')
    op.drop_table('admin')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admin',
    sa.Column('admin_id', sa.INTEGER(), server_default=sa.text("nextval('admin_admin_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone_no', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('id_front', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('id_back', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('invitation_code', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('admin_type', postgresql.ENUM('super-admin', 'admin', name='admin_type_enum'), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('admin_id', name='admin_pkey'),
    sa.UniqueConstraint('invitation_code', name='admin_invitation_code_key'),
    sa.UniqueConstraint('phone_no', name='admin_phone_no_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('broker',
    sa.Column('broker_id', sa.INTEGER(), server_default=sa.text("nextval('broker_broker_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phone_number', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('broker_id', name='broker_pkey'),
    sa.UniqueConstraint('phone_number', name='broker_phone_number_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user',
    sa.Column('user_id', sa.INTEGER(), server_default=sa.text("nextval('user_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone_no', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('invitation_code', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('invited_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('user_id', name='user_pkey'),
    sa.UniqueConstraint('invitation_code', name='user_invitation_code_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_user_user_id', 'user', ['user_id'], unique=False)
    op.create_index('ix_user_phone_no', 'user', ['phone_no'], unique=True)
    op.create_table('admin_location',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('area_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['admin.admin_id'], name='admin_location_admin_id_fkey'),
    sa.ForeignKeyConstraint(['area_code'], ['area.code'], name='admin_location_area_code_fkey'),
    sa.PrimaryKeyConstraint('id', name='admin_location_pkey')
    )
    op.create_table('area',
    sa.Column('code', sa.INTEGER(), server_default=sa.text("nextval('area_code_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('code', name='area_pkey'),
    sa.UniqueConstraint('name', name='area_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('house',
    sa.Column('house_id', sa.INTEGER(), server_default=sa.text("nextval('house_house_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('category', postgresql.ENUM('sell', 'rent', name='category_enum'), autoincrement=False, nullable=False),
    sa.Column('area_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('location', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('size', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('condition', postgresql.ENUM('fairly used', 'newly built', 'old and renovated', name='condition_enum'), autoincrement=False, nullable=True),
    sa.Column('bedroom', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('toilets', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('listed_by', postgresql.ENUM('agent', 'owner', name='listed_by_enum'), server_default=sa.text("'owner'::listed_by_enum"), autoincrement=False, nullable=True),
    sa.Column('property_type', postgresql.ENUM('apartment', 'condominium', name='property_type_enum'), autoincrement=False, nullable=False),
    sa.Column('furnish_status', postgresql.ENUM('furnished', 'semi furnished', 'unfurnished', name='furnish_status_enum'), autoincrement=False, nullable=False),
    sa.Column('bathroom', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('facility', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('negotiability', postgresql.ENUM('open to negotiation', 'not', name='negotiability_enum'), autoincrement=False, nullable=False),
    sa.Column('parking_space', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('assigned_for', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('owner', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('pending', 'available', 'rented', 'sold', name='status_enum'), autoincrement=False, nullable=False),
    sa.Column('image_urls', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('video', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('posted_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['area_code'], ['area.code'], name='house_area_code_fkey'),
    sa.ForeignKeyConstraint(['assigned_for'], ['admin.admin_id'], name='house_assigned_for_fkey'),
    sa.ForeignKeyConstraint(['owner'], ['user.user_id'], name='house_owner_fkey'),
    sa.ForeignKeyConstraint(['posted_by'], ['broker.broker_id'], name='house_posted_by_fkey'),
    sa.PrimaryKeyConstraint('house_id', name='house_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('failure_report',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('house_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reason', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['admin.admin_id'], name='failure_report_admin_id_fkey'),
    sa.ForeignKeyConstraint(['house_id'], ['house.house_id'], name='failure_report_house_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='failure_report_pkey')
    )
    op.create_table('success_report',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('admin_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('house_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('rent', 'sell', name='report_type_enum'), autoincrement=False, nullable=False),
    sa.Column('commission', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('transaction_photo', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['admin_id'], ['admin.admin_id'], name='success_report_admin_id_fkey'),
    sa.ForeignKeyConstraint(['house_id'], ['house.house_id'], name='success_report_house_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='success_report_pkey')
    )
    op.create_table('vip_status',
    sa.Column('vip_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('house_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['house.house_id'], name='vip_status_house_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('vip_id', name='vip_status_pkey'),
    sa.UniqueConstraint('house_id', name='vip_status_house_id_key')
    )
    op.create_table('invitation',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('house_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('request_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('visited_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('seen', 'not seen', name='visit_request_status_enum'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['house_id'], ['house.house_id'], name='invitation_house_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], name='invitation_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='invitation_pkey')
    )
    # ### end Alembic commands ###
